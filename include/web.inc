    <main id="content" class="main-area">
        <ul class="subindex">
            <li class="subkort-emne subhtml" id="html">
                <a href="#">
                    <figure class="subkort">
                        <img class="subhtmlpic" src="img/html_logo.png" alt="Noget om HTML">
                        <figcaption class="billedtekst">
                            <h2 class="billedtekst-titel">HTML</h2>
                            <p>HTML (Hyper Text Markup Language) er et opmærkningssprog der anvendes til at definere tekst og billeder på en hjemmeside.</p>
							<p>Ved udarbejdelse af HTML kode og CSS, er det god kodeskik at lave indrykninger, dette er med til at gøre koden mere overskuelig, både for en selv hvis man senere skal lave ændringer, men også for andre der ser koden for første gang. Ligeledes vil kommentarer være en stor hjælp til at finde rundt i koden.</p>
                        </figcaption>
                        
                        <figcaption class="billedtekst2">
                            <p>Et HTML dokument består af elementer (også kaldet tags) og attributter.</p>
                            <p>Et eksempel på et tag kunne være &lth1&gt som angiver en overskrift, langt de fleste tags skal lukkes med at sluttag, dette gøres ved at sætte en skråstreg ind &lt/h1&gt.</p>
                            <p>Hvor tags angiver kommandoen, tilføjer attributter yderligere værdier, der konfigurerer elementerne eller justerer deres adfærd på forskellige måder, så de opfylder de kriterier brugerne ønsker.</p>
                            <p>Der skelnes mellem semantiske og ikke semantiske tags, der bør altid såfremt det er muligt anvendes semantiske tags, idet disse fortæller noget om indholdet og derfor er med til at give en bedre SEO.</p>
                            <p>I HTML er der mulighed for at anvende hypertext og hyperlinks, hypertekst er en samling af tekststumper der er indbyrdes forbundet i et netværk, ved at indsætte forbindelser (links), kan der springes rundt i teksten på en side, hyperlinks bruges ikke kun til at komme til bestemte steder  på den enkelte side, men kan også springe til andre sider end den pågældende.</p>
                            <p>En hypertekst behøver ikke at bestå udelukkende af ord. Mange hypertekster benytter også billeder, filmklip, video og lyd, i disse tilfælde taler man om multimedier.</p>
                            <p>For at sikre sig at en HTML kode overholder standarderne bør den altid valideres på https://validator.w3.org/, det samme kan siges om din CSS.</p>
                            <p>
                        </figcaption>
                    </figure>
                </a>
            </li>
            
            <li class="subkort-emne subcss" id="css">
                <a href="#">
                    <figure class="subkort">
                        <img class="subcsspic" src="img/css3_logo.png" alt="Noget om CSS.">
                        <figcaption class="billedtekst">
                            <h2 class="billedtekst-titel">CSS</h2>
							<p>Browsere har en indbygget styling, der gør at din html altid vises, men du er uden indflydelse på hvordan det tager sig ud, det er her CSS komer ind i billedet.</p>
                            <p>Med et sæt regler, angiver man f.eks. hvor stor teksten skal være, hvilken font, de enkelte elementer skal have, linjehøjde, farve og meget mere.</p>
                            <p>Du får med andre ord selv fuldstændig styr på, hvordan du vil have de enkelte elementer på din hjemmeside skal vises.</p>
                        </figcaption>
                        <figcaption class="billedtekst2">
                            <p>Der er flere måder at anvende styling på, det kan indlejres i selve HTML-dokumentet som et style-element, eller der kan ligge for sig selv i en eller flere separte CSS filer. </p>
                            <p>Der tales i CSS om tre forskellige typer styling:</p>
                            <p>Inline style. Her skrives stylingen direkte i den enkelte html linie.</p>
                            <p>Internal stylesheet. Her skrives stylingen i toppen af html dokumenten, før selve html indholdet.</p>
                            <p>External stylesheet. Stylingen lægges uden for html dokumentet i en selvstændig fil, der oprettes derfor link ihtml dokumentet der henviser til hvor stylingen skal hentes.</p>
                            <p>En af fordelene ved at placere CSS i en fil for sig selv er, at stylingen kan bruges i flere dokumenter. Hvis man ikke lægger det i en fil for sig vil man skulle gentage den samme kode på hver side hvor man ønsker samme effekt, hvilket ikke er hensigtsmæssigt.</p>
                        </figcaption>
                    </figure>
                </a>
           </li>
            
            <li class="subkort-emne subserver" id="server">
                <a href="#">
                    <figure class="subkort">
                        <img class="subserverpic" src="img/server.png" alt="Servere.">
                        <figcaption class="billedtekst">
                            <h2 class="billedtekst-titel">Servere</h2>
							<p>Her kommer tekst mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle.</p>
                            <p>Her kommer tekst mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle.</p>
                        </figcaption>
                        <figcaption class="billedtekst2">
                            <p>Her kommer tekst mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle.</p>
                            <p>Her kommer tekst mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle.</p>
                        </figcaption>
                    </figure>
                </a>
            </li>
            
            <li class="subkort-emne subhistorie" id="historie">
                <a href="#">
                    <figure class="subkort">
                        <img class="subhistoriepic" src="img/www.jpg" alt="Internettets historie">
                        <figcaption class="billedtekst">
                            <h2>Historie</h2>
							<p>Her kommer tekst mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle.</p>
                            <p>Her kommer tekst mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle.</p>
                        </figcaption>
                        <figcaption class="billedtekst2">
							<p>Her kommer tekst mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle.</p>
                            <p>Her kommer tekst mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle.</p>
                        </figcaption>
                    </figure>
                </a>
            </li>
            
            <li class="subkort-emne subgrid" id="grid">
                <a href="#">
                    <figure class="subkort">
                        <img class="subgridpic" src="img/css_grid.png" alt="CSS Grid.">
                        <figcaption class="billedtekst">
                            <h2 class="billedtekst-titel">CSS Grid</h2>
							<p>CSS Grid blev introduceret i efteråret 2017, og har været med til at gøre det langt nemmere at placere indhold på en hjemmeside.</p>
                        </figcaption>
                            
                        <figcaption class="billedtekst2">
                            <p>CSS Grid har til en vis grad erstattet flexbox som før var det bedste redskab til placering af tekst og billeder. I forhold til hvad der tidligere var tilgængeligt, gav flexbox nye muligheder til at lette arbejdet med styling af hjemmesider.</p>
                            <p>CSS Grid har dog givet endnu flere muligheder for styling, og kan kombineres med flexbox, så man på den måde kan kombinere det bedste fra begge systemer. Med CSS grid opdeles websiden et i usynligt net hvori der kan placeres indhold, størrelse og placering af de enkelte celler i gridet styres via udelukkende af CSS.</p>
                            <p>Man er ikke begrænset i forhold til størrelse på den enkelte celler men kan have en variation i størrelsen afhængig af hvor meget ens indhold skal fylde. Dette kan give en mere spændende oplevelse af en webside. CSS grid har også medvirket til at gøre det nemmere at lave responsive designs.</p>
                            <p>I forbindelse med vores introduktion til CSS, havde vi en øvelser med at lave en morsenøgle, selvom det i dag forekommer som en meget simpel øvelse, var den på daværende tidspunkt en rigelig stor udfordring, det gav dog et indblik i hvordan CSS Grid fungere.</p>
                            <p>Herunder ses morsenøglen</p>
                            <p><img class="subhistoriepic" src="img/morse.png" alt="Morsenøgle lavet med CSS Grid">
                        </figcaption>
                        
                        <figcaption class="billedtekst3">
                            <h2>CSS Grid</h2>
							<p>CSS Grid blev introduceret i efteråret 2017, og har været med til at gøre det langt nemmere at placere indhold på en hjemmeside.</p>
                            <p>CSS Grid har til en vis grad erstattet flexbox som før var det bedste redskab til placering af tekst og billeder. I forhold til hvad der tidligere var tilgængeligt, gav flexbox nye muligheder til at lette arbejdet med styling af hjemmesider.</p>
                            <p>CSS Grid har dog givet endnu flere muligheder for styling, og kan kombineres med flexbox, så man på den måde kan kombinere det bedste fra begge systemer. Med CSS grid opdeles websiden et i usynligt net hvori der kan placeres indhold, størrelse og placering af de enkelte celler i gridet styres via udelukkende af CSS.</p>
                            <p>Man er ikke begrænset i forhold til størrelse på den enkelte celler men kan have en variation i størrelsen afhængig af hvor meget ens indhold skal fylde. Dette kan give en mere spændende oplevelse af en webside. CSS grid har også medvirket til at gøre det nemmere at lave responsive designs.</p>
                            <p>I forbindelse med vores introduktion til CSS, havde vi en øvelser med at lave en morsenøgle, selvom det i dag forekommer som en meget simpel øvelse, var den på daværende tidspunkt en rigelig stor udfordring, det gav dog et indblik i hvordan CSS Grid fungere.</p>
                            <p>Herunder ses morsenøglen:</p>
                            <p><img class="subhistoriepic" src="img/morse.png" alt="Morsenøgle lavet med CSS Grid"></p>
                        </figcaption>
                    </figure>
                </a>
            </li>
            
            <li class="subkort-emne subversion" id="version">
                <a href="#">
                    <figure class="subkort">
                        <img class="subversionpic" src="img/git_logo.jpg" alt="Versionsstyring.">
                        <figcaption class="billedtekst">
                            <h2>Versionsstyring</h2>
							<p>Hvorfor er det nødvendigt at have versionsstyring? Den forklaring der ligger lige for er at det er bedre at benytte versionsstyring end at græde over tabt kode.</p>
                        </figcaption>
                        <figcaption class="billedtekst2">
							<p>Hvilke muligheder er der så? For at være sikker på at få det gjort, er det en rigtig god ide at automatisere sin versionsstyring, til det kan man anvende Git.</p>
                            <p>Git er et open source versionsstyringssystem, det er en slags digital tidsmaskine, dog uden mulighed for at se ind i fremtiden, men alle ændringer der er foretaget siden et projekt er lagt ind kan findes frem igen, så hvis der er foretaget uhensigtsmæssige ændringer eller lavet fejl er der mulighed for at gå tilbage.</p>
                            <p>Git kan installeres på din computer, en bagdel ved kun at have Git lokalt på en computer, og det er selvfølgelig bedre end ingentinger. Bagdelen ved kun at have Git lokalt på en computer, er risikoen for nedbrud, kan du ikke komme i kontakt med dine data, er det jo lige meget om der er kørt versionsstyring eller ej.</p>
                            <p>Her kan en tjeneste som Github komme ind i billedet. GitHub er en web-baseret hosting service, som i samspil med Git gør det muligt at kontrollere den kontinuerlige udvikling af kildekode på et software udviklingsprojekt. Det var oprindelig tænkt som et site for kodedeling, men har også en social netværksdel hvorigennem bruger fra hele verden kan diskutere og dele erfaringer.</p>
                            <p>Github har features der gør det muligt at være flere der arbejder på samme projekt, du kan dele din data med andre, og selvfølgelig versionsstyre dine filer. Github kan både bruges i en browser eller installeret på en computer. Når du har Github installeret, kan du hele tiden følge med i historikken for dine filer, og uploade dem så du har en sikkerhedskopi i skyen.</p>
                            <p>
                            <h3>Git begreber der er værd at kende:</h3>
                            <p class="ital">Repository:</p> 
                            <p>Et repository er det sted, du lagrer dit projekt. Det kan være en lokal mappe eller en ekstern server eller tjeneste som Github.</p>
                            <p class="ital">Add:</p>
                            <p>Tilføjer filer eller ændringer til det næste commit.</p>
                            <p class="ital">Commit:</p>
                            <p>Et commit er som et save game i et computerspil. Når du har nået et punkt, hvor det er en god idé at lave et save game, du kan vende tilbage til, så laver du et commit. Det gemmer de ændringer, du har lavet indtil videre.</p>
                            <p class="ital">Push:</p>
                            <p>Når de ændringer, du har samlet i et commit, skal sendes til dit repository, skal du lave et push.</p>
                            <p class="ital">Branch:</p>
                            <p>En branch er noget du bruger, når du har brug for at arbejde på en kopi af projektet og ikke vil gemme dine ændringer direkte i 'master'-kopien. Du skifter til en branch med checkout.</p>
                            <p class="ital">Pull:</p>
                            <p>Når du skal hente og integrere de ændringer i projektet, som ligger i repository'et, så laver du et pull.</p>
                            <p class="ital">Merge:</p>
                            <p>Når Git skal samle ændringer, bliver dit commit merget. Det kan dog give en konflikt, hvis to har ændret de samme steder i en fil.</p>
                        </figcaption>
                        
                        <figcaption class="billedtekst3">
                            <h2 class="billedtekst3-titel">Versionsstyring</h2>
                            <p>Hvorfor er det nødvendigt at have versionsstyring? Den forklaring der ligger lige for er at det er bedre at benytte versionsstyring end at græde over tabt kode.</p>
							<p>Hvilke muligheder er der så? For at være sikker på at få det gjort, er det en rigtig god ide at automatisere sin versionsstyring, til det kan man anvende Git.</p>
                            <p>Git er et open source versionsstyringssystem, det er en slags digital tidsmaskine, dog uden mulighed for at se ind i fremtiden, men alle ændringer der er foretaget siden et projekt er lagt ind kan findes frem igen, så hvis der er foretaget uhensigtsmæssige ændringer eller lavet fejl er der mulighed for at gå tilbage.</p>
                        </figcaption>
                        
                        <figcaption class="billedtekst4">
                            <p>Git kan installeres på din computer, en bagdel ved kun at have Git lokalt på en computer, og det er selvfølgelig bedre end ingentinger. Bagdelen ved kun at have Git lokalt på en computer, er risikoen for nedbrud, kan du ikke komme i kontakt med dine data, er det jo lige meget om der er kørt versionsstyring eller ej.</p>
                            <p>Her kan en tjeneste som Github komme ind i billedet. GitHub er en web-baseret hosting service, som i samspil med Git gør det muligt at kontrollere den kontinuerlige udvikling af kildekode på et software udviklingsprojekt. Det var oprindelig tænkt som et site for kodedeling, men har også en social netværksdel hvorigennem bruger fra hele verden kan diskutere og dele erfaringer.</p>
                            <p>Github har features der gør det muligt at være flere der arbejder på samme projekt, du kan dele din data med andre, og selvfølgelig versionsstyre dine filer. Github kan både bruges i en browser eller installeret på en computer. Når du har Github installeret, kan du hele tiden følge med i historikken for dine filer, og uploade dem så du har en sikkerhedskopi i skyen.</p>
                            <p>
                            <h3>Git begreber der er værd at kende:</h3>
                            <p class="ital">Repository:</p> 
                            <p>Et repository er det sted, du lagrer dit projekt. Det kan være en lokal mappe eller en ekstern server eller tjeneste som Github.</p>
                            <p class="ital">Add:</p>
                            <p>Tilføjer filer eller ændringer til det næste commit.</p>
                            <p class="ital">Commit:</p>
                            <p>Et commit er som et save game i et computerspil. Når du har nået et punkt, hvor det er en god idé at lave et save game, du kan vende tilbage til, så laver du et commit. Det gemmer de ændringer, du har lavet indtil videre.</p>
                            <p class="ital">Push:</p>
                            <p>Når de ændringer, du har samlet i et commit, skal sendes til dit repository, skal du lave et push.</p>
                            <p class="ital">Branch:</p>
                            <p>En branch er noget du bruger, når du har brug for at arbejde på en kopi af projektet og ikke vil gemme dine ændringer direkte i 'master'-kopien. Du skifter til en branch med checkout.</p>
                            <p class="ital">Pull:</p>
                            <p>Når du skal hente og integrere de ændringer i projektet, som ligger i repository'et, så laver du et pull.</p>
                            <p class="ital">Merge:</p>
                            <p>Når Git skal samle ændringer, bliver dit commit merget. Det kan dog give en konflikt, hvis to har ændret de samme steder i en fil.</p>                            
                        </figcaption>
                    </figure>
                </a>
            </li>
            
            <li class="subkort-emne subarkitektur" id="arkitektur">
                <a href="#">
                    <figure class="subkort">
                        <img class="subarkitekturpic" src="img/information.jpg" alt="Informationsarkitektur.">
                        <figcaption class="billedtekst">
                            <h2 class="billedtekst-titel">Informationsarkitektur</h2>
							<p>Her kommer tekst mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle.</p>
                            <p>Her kommer tekst mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle.</p>
                        </figcaption>
                        <figcaption class="billedtekst2">
							<p>Her kommer tekst mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle.</p>
                            <p>Her kommer tekst mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle mumle.</p>
                        </figcaption>
                    </figure>
                </a>
            </li>
        </ul>
    </main>
