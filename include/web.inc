    <main id="content" class="main-area">
        <ul class="subindex">
            <li class="subkort-emne subhtml" id="html">
                    <figure class="subkort">
                        <img class="subhtmlpic" src="img/html_logo.png" alt="Noget om HTML">
                        <figcaption class="billedtekst">
                            <h2 class="billedtekst-titel">HTML</h2>
                            <p>HTML (Hyper Text Markup Language) er et opmærkningssprog der anvendes til at definere tekst og billeder på en hjemmeside.</p>
							<p>Ved udarbejdelse af HTML kode og CSS, er det god kodeskik at lave indrykninger, dette er med til at gøre koden mere overskuelig, både for en selv hvis man senere skal lave ændringer, men også for andre der ser koden for første gang. Ligeledes vil kommentarer være en stor hjælp til at finde rundt i koden.</p>
                        </figcaption>
                        
                        <figcaption class="billedtekst2">
                            <p>Et HTML dokument består af elementer (også kaldet tags) og attributter.</p>
                            <p>Et eksempel på et tag kunne være &lth1&gt som angiver en overskrift, langt de fleste tags skal lukkes med at sluttag, dette gøres ved at sætte en skråstreg ind &lt/h1&gt.</p>
                            <p>Hvor tags angiver kommandoen, tilføjer attributter yderligere værdier, der konfigurerer elementerne eller justerer deres adfærd på forskellige måder, så de opfylder de kriterier brugerne ønsker.</p>
                            <p>Der skelnes mellem semantiske og ikke semantiske tags, der bør altid såfremt det er muligt anvendes semantiske tags, idet disse fortæller noget om indholdet og derfor er med til at give en bedre SEO.</p>
                            <p>I HTML er der mulighed for at anvende hypertext og hyperlinks, hypertekst er en samling af tekststumper der er indbyrdes forbundet i et netværk, ved at indsætte forbindelser (links), kan der springes rundt i teksten på en side, hyperlinks bruges ikke kun til at komme til bestemte steder  på den enkelte side, men kan også springe til andre sider end den pågældende.</p>
                            <p>En hypertekst behøver ikke at bestå udelukkende af ord. Mange hypertekster benytter også billeder, filmklip, video og lyd, i disse tilfælde taler man om multimedier.</p>
                            <p>For at sikre sig at en HTML kode overholder standarderne bør den altid valideres på https://validator.w3.org/, det samme kan siges om din CSS.</p>
                            <p>
                        </figcaption>
                    </figure>
            </li>
            
            <li class="subkort-emne subcss" id="css">
                    <figure class="subkort">
                        <img class="subcsspic" src="img/css3_logo.png" alt="Noget om CSS.">
                        <figcaption class="billedtekst">
                            <h2 class="billedtekst-titel">CSS</h2>
							<p>Browsere har en indbygget styling, der gør at din html altid vises, men du er uden indflydelse på hvordan det tager sig ud, det er her CSS komer ind i billedet.</p>
                            <p>Med et sæt regler, angiver man f.eks. hvor stor teksten skal være, hvilken font, de enkelte elementer skal have, linjehøjde, farve og meget mere.</p>
                            <p>Du får med andre ord selv fuldstændig styr på, hvordan du vil have de enkelte elementer på din hjemmeside skal vises.</p>
                        </figcaption>
                        <figcaption class="billedtekst2">
                            <p>Der er flere måder at anvende styling på, det kan indlejres i selve HTML-dokumentet som et style-element, eller der kan ligge for sig selv i en eller flere separte CSS filer. </p>
                            <p>Der tales i CSS om tre forskellige typer styling:</p>
                            <p>Inline style. Her skrives stylingen direkte i den enkelte html linie.</p>
                            <p>Internal stylesheet. Her skrives stylingen i toppen af html dokumenten, før selve html indholdet.</p>
                            <p>External stylesheet. Stylingen lægges uden for html dokumentet i en selvstændig fil, der oprettes derfor link ihtml dokumentet der henviser til hvor stylingen skal hentes.</p>
                            <p>En af fordelene ved at placere CSS i en fil for sig selv er, at stylingen kan bruges i flere dokumenter. Hvis man ikke lægger det i en fil for sig vil man skulle gentage den samme kode på hver side hvor man ønsker samme effekt, hvilket ikke er hensigtsmæssigt.</p>
                        </figcaption>
                    </figure>  
           </li>
            
            <li class="subkort-emne subserver" id="server">
                    <figure class="subkort">
                        <img class="subserverpic" src="img/server.png" alt="Servere.">
                        <figcaption class="billedtekst">
                            <h2 class="billedtekst-titel" id="Server">Servere</h2>
							<p>I computeren er en server et computerprogram eller en enhed, der giver funktionalitet til andre programmer eller enheder, kaldet " klienter ". Denne arkitektur hedder klient-server-modellen.</p>
                        </figcaption>
                        <figcaption class="billedtekst2">
                            <p>Servere kan tilbyde forskellige funktioner, ofte kaldet "tjenester", såsom at dele data eller ressourcer blandt flere klienter, systemerne fungerer ved at en klient sender en anmodning til serveren, som udfører en handling og sender et svar tilbage til klienten. En enkelt server kan betjene flere klienter, og en enkelt klient kan bruge flere servere. En klientproces kan køre på samme enhed eller forbindes via et netværk enten lokalnetværk ( LAN ) eller et bredt netværk ( WAN ) over internettet til en server på en anden enhed. Typiske servere er databaseservere, filservere, mailservere, printernetkort, web-servere, spilservere og applikationsservere..</p>
                            <p>Hver type kører software, der er specifik for serverens formål. For eksempel kan en webserver køre Apache HTTP Server eller Microsoft IIS, som begge giver adgang til websteder over internettet. En mail-server kan køre et program som Exim eller iMail, som leverer SMTP- tjenester til afsendelse og modtagelse af e-mail. En filserver kan muligvis bruge Samba eller operativsystemets indbyggede fildelingstjenester til at dele filer via et netværk.</p>
                            <a target="blank" href="https://politiken.dk/forbrugogliv/digitalt/art5506303/Her-er-hele-historien-om-internettet-og-World-Wide-Web">
                            <h4>Kilde: https://politiken.dk/forbrugogliv/digitalt/art5506303/Her-er-hele-historien-om-internettet-og-World-Wide-Web</h4></a>
                            <a target="blank" href="https://techterms.com/definition/server">
                            <h4>Kilde: https://techterms.com/definition/server</h4>
                            </a>
                            <p>Mens serversoftwaren er specifik for typen af server, er hardware ikke lige så vigtig. Faktisk kan en almindelig stationær computer konverteres til en server ved at tilføje den relevante software. For eksempel kan en computer, der er tilsluttet et hjemmenetværk, betegnes som en filserver, printernetkort eller begge dele.</p>
                            <p>Servere tilgås med klienter, der findes også her specifikke typer klienter, det er derfor nødvendigt at anvende den korrekte klient for at opnå adgang til en bestemt servertype. Til en web-server skal anvendes en web-klient (browser) eksempelvis Firefox, Chrome eller Safari.</p>
                            <p>En ftp-server kommunikerer med en ftp-klient, der findes i lighed med browsere en lang række ftp-klienter og programmer med indbygget ftp-klient, det er som med valget af browser op til den enkelte at finde den man selv synes er den mest hensigtsmæssige ar arbejde med. Ftp-klienter er en typisk måde at up og downloade filer til en webserver.</p>
                            <p>Web servere levere kode i form at HTML, PHP, CSS, Javascript, billeder mm. til klienten (browseren) som så omsætter det til noget mere læsbart i form af en hjemmeside.</p>
                        </figcaption>
                        
                        <figcaption class="billedtekst3">
                            <h2 class="billedtekst-titel">Servere</h2>
							<p>I computeren er en server et computerprogram eller en enhed, der giver funktionalitet til andre programmer eller enheder, kaldet " klienter ". Denne arkitektur hedder klient-server-modellen. Servere kan tilbyde forskellige funktioner, ofte kaldet "tjenester", såsom at dele data eller ressourcer blandt flere klienter, systemerne fungerer ved at en klient sender en anmodning til serveren, som udfører en handling og sender et svar tilbage til klienten.</p>
                            <p>En enkelt server kan betjene flere klienter, og en enkelt klient kan bruge flere servere. En klientproces kan køre på samme enhed eller forbindes via et netværk enten lokalnetværk ( LAN ) eller et bredt netværk ( WAN ) over internettet til en server på en anden enhed. Typiske servere er databaseservere, filservere, mailservere, printernetkort, web-servere, spilservere og applikationsservere.</p>
                        </figcaption>
                        
                        <figcaption class="billedtekst4">
							<p>Hver type kører software, der er specifik for serverens formål. For eksempel kan en webserver køre Apache HTTP Server eller Microsoft IIS, som begge giver adgang til websteder over internettet. En mail-server kan køre et program som Exim eller iMail, som leverer SMTP- tjenester til afsendelse og modtagelse af e-mail. En filserver kan muligvis bruge Samba eller operativsystemets indbyggede fildelingstjenester til at dele filer via et netværk.</p>
                            <a target="blank" href="https://techterms.com/definition/server">
                            <h4>Kilde: https://techterms.com/definition/server</h4>
                            </a>
                            <p>Mens serversoftwaren er specifik for typen af server, er hardware ikke lige så vigtig. Faktisk kan en almindelig stationær computer konverteres til en server ved at tilføje den relevante software. For eksempel kan en computer, der er tilsluttet et hjemmenetværk, betegnes som en filserver, printernetkort eller begge dele.</p>
                            <p>Servere tilgås med klienter, der findes også her specifikke typer klienter, det er derfor nødvendigt at anvende den korrekte klient for at opnå adgang til en bestemt servertype. Til en web-server skal anvendes en web-klient (browser) eksempelvis Firefox, Chrome eller Safari.</p>
                            <p>En ftp-server kommunikerer med en ftp-klient, der findes i lighed med browsere en lang række ftp-klienter og programmer med indbygget ftp-klient, det er som med valget af browser op til den enkelte at finde den man selv synes er den mest hensigtsmæssige ar arbejde med. Ftp-klienter er en typisk måde at up og downloade filer til en webserver.</p>
                            <p>Web servere levere kode i form at HTML, PHP, CSS, Javascript, billeder mm. til klienten (browseren) som så omsætter det til noget mere læsbart i form af en hjemmeside.</p>
                        </figcaption>
                    </figure>
                </li>
            
                <li class="subkort-emne subhistorie" id="historie">
                    <figure class="subkort">
                        <img class="subhistoriepic" src="img/www.jpg" alt="Internettets historie">
                        <figcaption class="billedtekst">
                            <h2>Historie</h2>
							<p>Mange forbinder fejlagtigt Internet og World Wide Web som værende en og samme ting, men faktisk blev selve internettet opfundet længe før the World Wide Web.</p>
                        </figcaption>
                        
                        <figcaption class="billedtekst2">
							<p>Licklider var den første, som forestillede sig et netværk af computere. Det gjorde han i 1962, og allerede i 1965 blev denne forestilling til virkelighed, da computerne TX-2 og Q-32 opnåede en forbindelse med hinanden via en telefonlinje.</p>
                            <p>Dette var dog kun to computere i et netværk, og tricket var nu at få mere end to computere komplet på, på samme tid. Dette skete 4 år efter i 1969, hvor flere computere opnåede forbindelse med hinanden i en netværk der fik navnet ARPANET.</p>
                            <p>ARPANET var det første bud på et eksisterende, Internet-lignende netværk. Et hold af dataloger fra UCLA i Los Angeles under ledelse af Leonard Kleinrock, førte an i en større gruppe af folk, der undersøgte, hvordan sådan et netværk kunne se ud</p>
                            <p>Den 29. oktober 1969, koblede Kleinrock sammen med en assistent UCLAs computer sammen med en anden computer 550 km længere nord på i Silicon Valley, på Stanford Research Institute.</p>
                            <p>Siden blev ARPANET langsomt udvidet og udvidet og i løbet af den første halvdel af 70’erne lod forskere verden over sig inspirere af ARPANET til at skabe deres egne netværk, herunder bl.a. CYCLADES-netværket i Frankrig.</p>
                            <p>Alene i USA opstod der flere andre netværk, som følge heraf opstod ideen til, at disse netværk skulle kobles sammen, så ikke bare computerne, men også disse netværk kunne tale med hinanden. Altså et net af netværk, et Inter-Net.</p>
                            <p>Bob Kahn og Vint Cerf, der havde arbejdet på ARPAnet under Leonard Kleinrock på UCLA. Udviklede sammen et regelsæt, en protokol, der definerede, hvordan computere kunne tale sammen på tværs af netværk. De kaldte protokollen for Transmission Control Protocol eller TCP.</p>
                            <p>I december 1974 blev den færdige specifikation for protokollen præsenteret som ’Internet Transmission Control Program’, og det er første gang udtrykket Internet blev brugt i et offentligt forum.</p>
                            <p>Protokollen, der blev beskrevet, er det vi i dag kender som TCP/IP, hvilket er en af nettets fundamentale byggesten. Det er det centrale regelsæt, eller fælles referenceramme, der gør, at servere og computere verden over kan tale sammen i det, vi kender som Internet.</p>
                            <p>Vi skal dog helt frem til 1989, før Sir Timothy John Berners-Lee suscesfuldt opnår kommunikation mellem en Hypertext Transfer Protocol (HTTP) klient og en server via internettet.</p>
                            <p>2 år efter i 1991 slippers World Wide Web og dets protokoller løs og gør dermed internettet tilgængeligt for alle, den 30. april 1993, frigives WWW til gratis brug.</p>
                            <p>WWW er blot det program, en app, der kører ovenpå Internet, men som giver os mulighed for at opleve tekst, lyd, billeder og video i en webbrowser, der bruger Internet til at hente informationerne med.</p>
                            <a target="blank" href="https://politiken.dk/forbrugogliv/digitalt/art5506303/Her-er-hele-historien-om-internettet-og-World-Wide-Web">
                            <h4>Kilde: https://politiken.dk/forbrugogliv/digitalt/art5506303/Her-er-hele-historien-om-internettet-og-World-Wide-Web</h4>
                            </a>
                        </figcaption>
                        
                        <figcaption class="billedtekst3">
                            <h2>Historie</h2>
							<p>Mange forbinder fejlagtigt Internet og World Wide Web som værende en og samme ting, men faktisk blev selve internettet opfundet længe før the World Wide Web.</p>
                            <p>Licklider var den første, som forestillede sig et netværk af computere. Det gjorde han i 1962, og allerede i 1965 blev denne forestilling til virkelighed, da computerne TX-2 og Q-32 opnåede en forbindelse med hinanden via en telefonlinje.</p>
                            <p>Dette var dog kun to computere i et netværk, og tricket var nu at få mere end to computere komplet på, på samme tid. Dette skete 4 år efter i 1969, hvor flere computere opnåede forbindelse med hinanden i en netværk der fik navnet ARPANET.</p>
                        </figcaption>
                        
                        <figcaption class="billedtekst4">
							<p>ARPANET var det første bud på et eksisterende, Internet-lignende netværk. Et hold af dataloger fra UCLA i Los Angeles under ledelse af Leonard Kleinrock, førte an i en større gruppe af folk, der undersøgte, hvordan sådan et netværk kunne se ud</p>
                            <p>Den 29. oktober 1969, koblede Kleinrock sammen med en assistent UCLAs computer sammen med en anden computer 550 km længere nord på i Silicon Valley, på Stanford Research Institute.</p>
                            <p>Siden blev ARPANET langsomt udvidet og udvidet og i løbet af den første halvdel af 70’erne lod forskere verden over sig inspirere af ARPANET til at skabe deres egne netværk, herunder bl.a. CYCLADES-netværket i Frankrig.</p>
                            <p>Alene i USA opstod der flere andre netværk, som følge heraf opstod ideen til, at disse netværk skulle kobles sammen, så ikke bare computerne, men også disse netværk kunne tale med hinanden. Altså et net af netværk, et Inter-Net.</p>
                            <p>Bob Kahn og Vint Cerf, der havde arbejdet på ARPAnet under Leonard Kleinrock på UCLA. Udviklede sammen et regelsæt, en protokol, der definerede, hvordan computere kunne tale sammen på tværs af netværk. De kaldte protokollen for Transmission Control Protocol eller TCP.</p>
                            <p>I december 1974 blev den færdige specifikation for protokollen præsenteret som ’Internet Transmission Control Program’, og det er første gang udtrykket Internet blev brugt i et offentligt forum.</p>
                            <p>Protokollen, der blev beskrevet, er det vi i dag kender som TCP/IP, hvilket er en af nettets fundamentale byggesten. Det er det centrale regelsæt, eller fælles referenceramme, der gør, at servere og computere verden over kan tale sammen i det, vi kender som Internet.</p>
                            <p>Vi skal dog helt frem til 1989, før Sir Timothy John Berners-Lee suscesfuldt opnår kommunikation mellem en Hypertext Transfer Protocol (HTTP) klient og en server via internettet.</p>
                            <p>2 år efter i 1991 slippers World Wide Web og dets protokoller løs og gør dermed internettet tilgængeligt for alle, den 30. april 1993, frigives WWW til gratis brug.</p>
                            <p>WWW er blot det program, en app, der kører ovenpå Internet, men som giver os mulighed for at opleve tekst, lyd, billeder og video i en webbrowser, der bruger Internet til at hente informationerne med.</p>
                            <a target="blank" href="https://politiken.dk/forbrugogliv/digitalt/art5506303/Her-er-hele-historien-om-internettet-og-World-Wide-Web">
                            <h4>Kilde: https://politiken.dk/forbrugogliv/digitalt/art5506303/Her-er-hele-historien-om-internettet-og-World-Wide-Web</h4>
                            </a>
                        </figcaption>
                    </figure>
            </li>
            
            <li class="subkort-emne subgrid" id="grid">
                    <figure class="subkort">
                        <img class="subgridpic" src="img/css_grid.png" alt="CSS Grid.">
                        <figcaption class="billedtekst">
                            <h2 class="billedtekst-titel">CSS Grid</h2>
							<p>CSS Grid blev introduceret i efteråret 2017, og har været med til at gøre det langt nemmere at placere indhold på en hjemmeside.</p>
                        </figcaption>
                            
                        <figcaption class="billedtekst2">
                            <p>CSS Grid har til en vis grad erstattet flexbox som før var det bedste redskab til placering af tekst og billeder. I forhold til hvad der tidligere var tilgængeligt, gav flexbox nye muligheder til at lette arbejdet med styling af hjemmesider.</p>
                            <p>CSS Grid har dog givet endnu flere muligheder for styling, og kan kombineres med flexbox, så man på den måde kan kombinere det bedste fra begge systemer. Med CSS grid opdeles websiden et i usynligt net hvori der kan placeres indhold, størrelse og placering af de enkelte celler i gridet styres via udelukkende af CSS.</p>
                            <p>Man er ikke begrænset i forhold til størrelse på den enkelte celler men kan have en variation i størrelsen afhængig af hvor meget ens indhold skal fylde. Dette kan give en mere spændende oplevelse af en webside. CSS grid har også medvirket til at gøre det nemmere at lave responsive designs.</p>
                            <p>I forbindelse med vores introduktion til CSS, havde vi en øvelser med at lave en morsenøgle, selvom det i dag forekommer som en meget simpel øvelse, var den på daværende tidspunkt en rigelig stor udfordring, det gav dog et indblik i hvordan CSS Grid fungere.</p>
                            <p>Herunder ses morsenøglen</p>
                            <p><img class="subhistoriepic" src="img/morse.png" alt="Morsenøgle lavet med CSS Grid">
                        </figcaption>
                        
                        <figcaption class="billedtekst3">
                            <h2>CSS Grid</h2>
							<p>CSS Grid blev introduceret i efteråret 2017, og har været med til at gøre det langt nemmere at placere indhold på en hjemmeside.</p>
                            <p>CSS Grid har til en vis grad erstattet flexbox som før var det bedste redskab til placering af tekst og billeder. I forhold til hvad der tidligere var tilgængeligt, gav flexbox nye muligheder til at lette arbejdet med styling af hjemmesider.</p>
                            <p>CSS Grid har dog givet endnu flere muligheder for styling, og kan kombineres med flexbox, så man på den måde kan kombinere det bedste fra begge systemer. Med CSS grid opdeles websiden et i usynligt net hvori der kan placeres indhold, størrelse og placering af de enkelte celler i gridet styres via udelukkende af CSS.</p>
                            <p>Man er ikke begrænset i forhold til størrelse på den enkelte celler men kan have en variation i størrelsen afhængig af hvor meget ens indhold skal fylde. Dette kan give en mere spændende oplevelse af en webside. CSS grid har også medvirket til at gøre det nemmere at lave responsive designs.</p>
                            <p>I forbindelse med vores introduktion til CSS, havde vi en øvelser med at lave en morsenøgle, selvom det i dag forekommer som en meget simpel øvelse, var den på daværende tidspunkt en rigelig stor udfordring, det gav dog et indblik i hvordan CSS Grid fungere.</p>
                            <p>Herunder ses morsenøglen:</p>
                            <p><img class="subhistoriepic" src="img/morse.png" alt="Morsenøgle lavet med CSS Grid"></p>
                        </figcaption>
                    </figure>
            </li>
            
            <li class="subkort-emne subversion" id="version">
                    <figure class="subkort">
                        <img class="subversionpic" src="img/git_logo.jpg" alt="Versionsstyring.">
                        <figcaption class="billedtekst">
                            <h2>Versionsstyring</h2>
							<p>Hvorfor er det nødvendigt at have versionsstyring? Den forklaring der ligger lige for er at det er bedre at benytte versionsstyring end at græde over tabt kode.</p>
                        </figcaption>
                        <figcaption class="billedtekst2">
							<p>Hvilke muligheder er der så? For at være sikker på at få det gjort, er det en rigtig god ide at automatisere sin versionsstyring, til det kan man anvende Git.</p>
                            <p>Git er et open source versionsstyringssystem, det er en slags digital tidsmaskine, dog uden mulighed for at se ind i fremtiden, men alle ændringer der er foretaget siden et projekt er lagt ind kan findes frem igen, så hvis der er foretaget uhensigtsmæssige ændringer eller lavet fejl er der mulighed for at gå tilbage.</p>
                            <p>Git kan installeres på din computer, en bagdel ved kun at have Git lokalt på en computer, og det er selvfølgelig bedre end ingentinger. Bagdelen ved kun at have Git lokalt på en computer, er risikoen for nedbrud, kan du ikke komme i kontakt med dine data, er det jo lige meget om der er kørt versionsstyring eller ej.</p>
                            <p>Her kan en tjeneste som Github komme ind i billedet. GitHub er en web-baseret hosting service, som i samspil med Git gør det muligt at kontrollere den kontinuerlige udvikling af kildekode på et software udviklingsprojekt. Det var oprindelig tænkt som et site for kodedeling, men har også en social netværksdel hvorigennem bruger fra hele verden kan diskutere og dele erfaringer.</p>
                            <p>Github har features der gør det muligt at være flere der arbejder på samme projekt, du kan dele din data med andre, og selvfølgelig versionsstyre dine filer. Github kan både bruges i en browser eller installeret på en computer. Når du har Github installeret, kan du hele tiden følge med i historikken for dine filer, og uploade dem så du har en sikkerhedskopi i skyen.</p>
                            <p>
                            <h3>Git begreber der er værd at kende:</h3>
                            <p class="ital">Repository:</p> 
                            <p>Et repository er det sted, du lagrer dit projekt. Det kan være en lokal mappe eller en ekstern server eller tjeneste som Github.</p>
                            <p class="ital">Add:</p>
                            <p>Tilføjer filer eller ændringer til det næste commit.</p>
                            <p class="ital">Commit:</p>
                            <p>Et commit er som et save game i et computerspil. Når du har nået et punkt, hvor det er en god idé at lave et save game, du kan vende tilbage til, så laver du et commit. Det gemmer de ændringer, du har lavet indtil videre.</p>
                            <p class="ital">Push:</p>
                            <p>Når de ændringer, du har samlet i et commit, skal sendes til dit repository, skal du lave et push.</p>
                            <p class="ital">Branch:</p>
                            <p>En branch er noget du bruger, når du har brug for at arbejde på en kopi af projektet og ikke vil gemme dine ændringer direkte i 'master'-kopien. Du skifter til en branch med checkout.</p>
                            <p class="ital">Pull:</p>
                            <p>Når du skal hente og integrere de ændringer i projektet, som ligger i repository'et, så laver du et pull.</p>
                            <p class="ital">Merge:</p>
                            <p>Når Git skal samle ændringer, bliver dit commit merget. Det kan dog give en konflikt, hvis to har ændret de samme steder i en fil.</p>
                        </figcaption>
                        
                        <figcaption class="billedtekst3">
                            <h2 class="billedtekst3-titel">Versionsstyring</h2>
                            <p>Hvorfor er det nødvendigt at have versionsstyring? Den forklaring der ligger lige for er at det er bedre at benytte versionsstyring end at græde over tabt kode.</p>
							<p>Hvilke muligheder er der så? For at være sikker på at få det gjort, er det en rigtig god ide at automatisere sin versionsstyring, til det kan man anvende Git.</p>
                            <p>Git er et open source versionsstyringssystem, det er en slags digital tidsmaskine, dog uden mulighed for at se ind i fremtiden, men alle ændringer der er foretaget siden et projekt er lagt ind kan findes frem igen, så hvis der er foretaget uhensigtsmæssige ændringer eller lavet fejl er der mulighed for at gå tilbage.</p>
                            <p>Git kan installeres på din computer, en bagdel ved kun at have Git lokalt på en computer, og det er selvfølgelig bedre end ingentinger. Bagdelen ved kun at have Git lokalt på en computer, er risikoen for nedbrud, kan du ikke komme i kontakt med dine data, er det jo lige meget om der er kørt versionsstyring eller ej.</p>
                        </figcaption>
                        
                        <figcaption class="billedtekst4">
                            <p>Her kan en tjeneste som Github komme ind i billedet. GitHub er en web-baseret hosting service, som i samspil med Git gør det muligt at kontrollere den kontinuerlige udvikling af kildekode på et software udviklingsprojekt. Det var oprindelig tænkt som et site for kodedeling, men har også en social netværksdel hvorigennem bruger fra hele verden kan diskutere og dele erfaringer.</p>
                            <p>Github har features der gør det muligt at være flere der arbejder på samme projekt, du kan dele din data med andre, og selvfølgelig versionsstyre dine filer. Github kan både bruges i en browser eller installeret på en computer. Når du har Github installeret, kan du hele tiden følge med i historikken for dine filer, og uploade dem så du har en sikkerhedskopi i skyen.</p>
                            <p>
                            <h3>Git begreber der er værd at kende:</h3>
                            <p class="ital">Repository:</p> 
                            <p>Et repository er det sted, du lagrer dit projekt. Det kan være en lokal mappe eller en ekstern server eller tjeneste som Github.</p>
                            <p class="ital">Add:</p>
                            <p>Tilføjer filer eller ændringer til det næste commit.</p>
                            <p class="ital">Commit:</p>
                            <p>Et commit er som et save game i et computerspil. Når du har nået et punkt, hvor det er en god idé at lave et save game, du kan vende tilbage til, så laver du et commit. Det gemmer de ændringer, du har lavet indtil videre.</p>
                            <p class="ital">Push:</p>
                            <p>Når de ændringer, du har samlet i et commit, skal sendes til dit repository, skal du lave et push.</p>
                            <p class="ital">Branch:</p>
                            <p>En branch er noget du bruger, når du har brug for at arbejde på en kopi af projektet og ikke vil gemme dine ændringer direkte i 'master'-kopien. Du skifter til en branch med checkout.</p>
                            <p class="ital">Pull:</p>
                            <p>Når du skal hente og integrere de ændringer i projektet, som ligger i repository'et, så laver du et pull.</p>
                            <p class="ital">Merge:</p>
                            <p>Når Git skal samle ændringer, bliver dit commit merget. Det kan dog give en konflikt, hvis to har ændret de samme steder i en fil.</p>      
                        </figcaption>
                    </figure>
            </li>
            
            <li class="subkort-emne subarkitektur" id="arkitektur">
                    <figure class="subkort">
                        <img class="subarkitekturpic" src="img/information.jpg" alt="Informationsarkitektur.">
                        <figcaption class="billedtekst">
                            <h2 class="billedtekst-titel">Informationsarkitektur</h2>
							<p>I 1976 bruger den amerikanske arkitekt Richard Saul Wurmann for første gang begrebet informationsarkitektur.</p>
                        </figcaption>
                        
                        <figcaption class="billedtekst2">
                            <p>Begrebet udsprang af, at Richard Saul Wurmann i løbet af 1960erne var blevet mere og mere optaget af hvordan bygninger, transportmidler og mennesker spillede sammen og udvekslede informationer i den moderne storby. Hans udgangspunkt var som arkitekt, men hans faglige fokus blev i løbet af 1970´erne i højere og højere grad grafisk design og kommunikation</p>
                            <p>Vidensamfundet og specielt Internettets fremkomst har skabt et behov for at forstå og begrebsliggøre, hvordan vi forholder os til information.</p>
                            <p>I dag er problemet, hvordan vi producerer, sammensætter og lagrer informationer oven på den uendelig kaotiske strøm af data, der løber under vidensamfundet. Dermed er vi alle sammen informationsarkitekter. I renæssancen kunne Descartes udtrykke det moderne menneskes selvforståelse som cogito ergo sum jeg tænker altså er jeg . Med vidensamfundet kan vi i begyndelsen af det 20. århundrede sige: Jeg er informationsarkitekt, jeg er. Eller: IA, I AM.</p>
                            <a target="blank" href="https://www.kommunikationsforum.dk/log/IAIAM.pdf">
                            <h4>Kilde: https://www.kommunikationsforum.dk/log/IAIAM.pdf</h4>
                            </a>
                            <p>Selvom begrebet er udsprunget i en helt anden sammenhæng, kan vi bruge IA i vores arbejde til at organisere, opmærke, prioritere og forbinde websitets indhold for at understøtte brugeroplevelsen samt søgerobotternes anvendelse, forståelse og indeksering af dette. </p>
                            <p>Man kan sige at jo mere besværlig navigation og informationssøgning er jo dårligere informationsarkitektur er der på siden. God informationsarkitektur, er når man ikke behøver at søge efter informationerne, men intuitivt kan klikke sig frem til det de informationer der ønskes. Dårlig informationsarkitektur er hvis det kun giver mening for en meget smal målgruppe, eksempelvis en sortering over kunstnere der elsker lakrids.</p>
                            <p>Der findes flere metoder til opnå en bedre informationsarkitektur, en af dem er Wurmans LATCH model, der angiver 5 måder at kategorisere på.</p>
                            <p class="ital">Location</p>
                            <p>For eksemplel butikskæders placering i landet, samlevejledninger og lignende.</p>
                            <p class="ital">Alfabet</p>
                            <p>Alfabetisk sortering bruges bla. i indeksering af bøger, på biblioteker, telefonbøger mv.</p>
                            <p class="ital">Time</p>
                            <p>Kan være en liste over udgivelsesår for film eller musik</p>
                            <p class="ital">Category</p>
                            <p>Kategori sortering kan være en sortering efter farve, genre, annoncer sorteret efter fag.</p>
                            <p class="ital">Hierarchy</p>
                            <p>En hierarkisk sortering kan være efter størrelse, f.eks. mindste til største</p>
                            <p>Det kan også være en kombination af flere måder, et eksempel kunne være en pladebutik, der har sorteret efter både genre (Category) og kunstner navn (Alfabet)</p>
                            <p>Vi lavede en øvelse hvor vi i grupper fik til opgave at sortere lego klodser, her viste det sig hvor forskelligt opgaven kunne gribes an, nogle sortere efter størrelse, andre efter form eller farve, og nogle en kombination af førnævnte. Dette  viste hvor vigtigt det er med god informationsarkitektur, idet der stadig vil skulle søges yderligere, såfremt en bestemt form og størrelse i en bestemt farve er det der søges. Er sorteringen så lavet udelukkende efter farve, vil det stadig kræve yderligere søgning. </p>
                            <p>En metode til brug for at klarlægge hvordan informationsarkitekturen skal opbygges er kortsortering, hvor man lader testpersoner kategoriserer de forskellige emner.</p> 
                            <p>En anden metode kunne være ”gangstertesten” hvor man kan iagttage hvorledes testpersoner vil navigere på en side de aldrig har besøgt tidligere.</p>

                        </figcaption>
                        
                        <figcaption class="billedtekst3">
                            <h2 class="billedtekst-titel">Informationsarkitektur</h2>
							<p>I 1976 bruger den amerikanske arkitekt Richard Saul Wurmann for første gang begrebet informationsarkitektur.</p>
                            <p>Begrebet udsprang af, at Richard Saul Wurmann i løbet af 1960erne var blevet mere og mere optaget af hvordan bygninger, transportmidler og mennesker spillede sammen og udvekslede informationer i den moderne storby. Hans udgangspunkt var som arkitekt, men hans faglige fokus blev i løbet af 1970´erne i højere og højere grad grafisk design og kommunikation</p>
							<p>Vidensamfundet og specielt Internettets fremkomst har skabt et behov for at forstå og begrebsliggøre, hvordan vi forholder os til information.</p>
                        </figcaption>
                        
                        <figcaption class="billedtekst4">
                            <p>I dag er problemet, hvordan vi producerer, sammensætter og lagrer informationer oven på den uendelig kaotiske strøm af data, der løber under vidensamfundet. Dermed er vi alle sammen informationsarkitekter. I renæssancen kunne Descartes udtrykke det moderne menneskes selvforståelse som cogito ergo sum jeg tænker altså er jeg . Med vidensamfundet kan vi i begyndelsen af det 20. århundrede sige: Jeg er informationsarkitekt, jeg er. Eller: IA, I AM.</p>
                            <a target="blank" href="https://www.kommunikationsforum.dk/log/IAIAM.pdf">
                            <h4>Kilde: https://www.kommunikationsforum.dk/log/IAIAM.pdf</h4>
                            </a>
                            <p>Selvom begrebet er udsprunget i en helt anden sammenhæng, kan vi bruge IA i vores arbejde til at organisere, opmærke, prioritere og forbinde websitets indhold for at understøtte brugeroplevelsen samt søgerobotternes anvendelse, forståelse og indeksering af dette. </p>
                            <p>Man kan sige at jo mere besværlig navigation og informationssøgning er jo dårligere informationsarkitektur er der på siden. God informationsarkitektur, er når man ikke behøver at søge efter informationerne, men intuitivt kan klikke sig frem til det de informationer der ønskes. Dårlig informationsarkitektur er hvis det kun giver mening for en meget smal målgruppe, eksempelvis en sortering over kunstnere der elsker lakrids.</p>
                            <p>Der findes flere metoder til opnå en bedre informationsarkitektur, en af dem er Wurmans LATCH model, der angiver 5 måder at kategorisere på.</p>
                            <p class="ital">Location</p>
                            <p>For eksemplel butikskæders placering i landet, samlevejledninger og lignende.</p>
                            <p class="ital">Alfabet</p>
                            <p>Alfabetisk sortering bruges bla. i indeksering af bøger, på biblioteker, telefonbøger mv.</p>
                            <p class="ital">Time</p>
                            <p>Kan være en liste over udgivelsesår for film eller musik</p>
                            <p class="ital">Category</p>
                            <p>Kategori sortering kan være en sortering efter farve, genre, annoncer sorteret efter fag.</p>
                            <p class="ital">Hierarchy</p>
                            <p>En hierarkisk sortering kan være efter størrelse, f.eks. mindste til største</p>
                            <p>Det kan også være en kombination af flere måder, et eksempel kunne være en pladebutik, der har sorteret efter både genre (Category) og kunstner navn (Alfabet)</p>
                            <p>Vi lavede en øvelse hvor vi i grupper fik til opgave at sortere lego klodser, her viste det sig hvor forskelligt opgaven kunne gribes an, nogle sortere efter størrelse, andre efter form eller farve, og nogle en kombination af førnævnte. Dette  viste hvor vigtigt det er med god informationsarkitektur, idet der stadig vil skulle søges yderligere, såfremt en bestemt form og størrelse i en bestemt farve er det der søges. Er sorteringen så lavet udelukkende efter farve, vil det stadig kræve yderligere søgning. </p>
                            <p>En metode til brug for at klarlægge hvordan informationsarkitekturen skal opbygges er kortsortering, hvor man lader testpersoner kategoriserer de forskellige emner.</p> 
                            <p>En anden metode kunne være ”gangstertesten” hvor man kan iagttage hvorledes testpersoner vil navigere på en side de aldrig har besøgt tidligere.</p>
                        </figcaption>
                    </figure>
            </li>
        </ul>
    </main>
